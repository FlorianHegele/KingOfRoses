package control;

import boardifier.control.Controller;
import boardifier.control.ControllerAction;
import boardifier.model.GameException;
import boardifier.model.Model;
import boardifier.view.View;
import control.action.ConfigController;
import control.action.WindowController;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import model.GameConfigurationModel;
import model.data.AIData;
import model.data.PlayerData;
import model.data.WindowType;
import view.KoRView;
import view.window.ConfigView;

import java.util.List;

/**
 * A basic action controller that only manages menu actions
 * Action events are mostly generated when there are user interactions with widgets like
 * buttons, checkboxes, menus, ...
 */
public class KoRControllerAction extends ControllerAction implements EventHandler<ActionEvent> {

    // to avoid lots of casts, create an attribute that matches the instance type.
    private final KoRView koRView;
    private final GameConfigurationModel gameConfigurationModel;

    public KoRControllerAction(Model model, View view, Controller control,GameConfigurationModel gameConfigurationModel) {
        super(model, view, control);
        // take the view parameter ot define a local view attribute with the real instance type, i.e. BasicView.
        koRView = (KoRView) view;
        this.gameConfigurationModel = gameConfigurationModel;

        // set handlers dedicated to menu items
        setMenuHandlers();

        // If needed, set the general handler for widgets that may be included within the scene.
        // In this case, the current gamestage view must be retrieved and casted to the right type
        // in order to have an access to the widgets, and finally use setOnAction(this).
        // For example, assuming the current gamestage view is an instance of MyGameStageView, which
        // creates a Button myButton :
        // ((MyGameStageView)view.getCurrentGameStageView()).getMyButton().setOnAction(this).

    }

    public Controller getController() {
        return control;
    }

    private void setMenuHandlers() {

        // set event handler on the MenuStart item
        koRView.getMenuStart().setOnAction(e -> {
            try {
                Sound.playSound("src/main/resources/sword1.wav",0.3);
                Sound.playMusic("src/main/resources/Daydream.wav");
                gameConfigurationModel.addPlayers("Player 1 - Blue","Player 2 - Red");
                control.startGame();
            } catch (GameException err) {
                System.err.println(err.getMessage());
                System.exit(1);
            }
        });

        // set event handler on the MenuIntro item
        koRView.getMenuIntro().setOnAction(e -> {
            Sound.playSound("src/main/resources/Doorknob.wav",0.5);
            Sound.playMusic("src/main/resources/main.wav",1000);
            control.stopGame();
            koRView.resetView();
        });

        // set event handler on the Configuration menu item
        koRView.getMenuConfig().setOnAction(e -> {
            Sound.playSound("src/main/resources/Doorknob.wav");
            Sound.playMusic("src/main/resources/shop.wav",650);
            System.out.println("KoR Config :" + gameConfigurationModel.getPlayerDataAIDataMap().toString());
            control.stopGame();
            koRView.resetView();

            koRView.setContent(WindowType.CONFIG);
        });

        // set event handler on the MenuQuit item
        koRView.getMenuQuit().setOnAction(e -> System.exit(0));

        //set event handler on the paramÃ¨tres menu
        koRView.getMenuMusique().setOnAction(e -> Sound.musicSwitch());
        koRView.getMenuSFX().setOnAction(e -> Sound.soundSwitch());

        List<WindowController> controllerList = List.of(
                new ConfigController(this, koRView)
        );

        controllerList.forEach(WindowController::setHandler);
    }


    /**
     * The general handler for action events.
     * this handler should be used if the code to process a particular action event is too long
     * to fit in an arrow function (like with menu items above). In this case, this handler must be
     * associated to a widget w, by calling w.setOnAction(this) (see constructor).
     *
     * @param event An action event generated by a widget of the scene.
     */
    public void handle(ActionEvent event) {
        if (!model.isCaptureActionEvent()) {
        }
    }

    public GameConfigurationModel getGameConfigurationModel() {
        return gameConfigurationModel;
    }
}

